
G431 NRF24i.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044d0  080044d0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d0  080044d0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080044e4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080044e4  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cee2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002050  00000000  00000000  00012f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00014f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f3  00000000  00000000  00015ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dec1  00000000  00000000  00016693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8e7  00000000  00000000  00034554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c45f4  00000000  00000000  00041e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010642f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  00106474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00109afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080044a8 	.word	0x080044a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080044a8 	.word	0x080044a8

08000218 <NRF24_CE_L>:
#include "stm32g4xx_hal.h"
#include "NRF24.h"
#include "spi.h"

// CE and CSN functions
static inline void NRF24_CE_L() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2102      	movs	r1, #2
 8000220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000224:	f002 fd30 	bl	8002c88 <HAL_GPIO_WritePin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <NRF24_CE_H>:

static inline void NRF24_CE_H() {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2102      	movs	r1, #2
 8000234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000238:	f002 fd26 	bl	8002c88 <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <NRF24_CSN_L>:

static inline void NRF24_CSN_L() {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800024c:	f002 fd1c 	bl	8002c88 <HAL_GPIO_WritePin>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <NRF24_CSN_H>:

static inline void NRF24_CSN_H() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2110      	movs	r1, #16
 800025c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000260:	f002 fd12 	bl	8002c88 <HAL_GPIO_WritePin>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <NRF24_SPI_Send>:


// SPI read/write function
static inline uint8_t NRF24_SPI_Send(uint8_t data) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af02      	add	r7, sp, #8
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
    uint8_t result;
    if (HAL_SPI_TransmitReceive(&hspi1, &data, &result, 1, 2000) != HAL_OK) {
 8000272:	f107 020f 	add.w	r2, r7, #15
 8000276:	1df9      	adds	r1, r7, #7
 8000278:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2301      	movs	r3, #1
 8000280:	4806      	ldr	r0, [pc, #24]	@ (800029c <NRF24_SPI_Send+0x34>)
 8000282:	f003 fd5e 	bl	8003d42 <HAL_SPI_TransmitReceive>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <NRF24_SPI_Send+0x28>
        Error_Handler();
 800028c:	f000 fb74 	bl	8000978 <Error_Handler>
    }
    return result;
 8000290:	7bfb      	ldrb	r3, [r7, #15]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200000a4 	.word	0x200000a4

080002a0 <NRF24_CMD>:


void NRF24_CMD(uint8_t CMD){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]

    NRF24_CSN_L();
 80002aa:	f7ff ffc9 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(CMD);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffd9 	bl	8000268 <NRF24_SPI_Send>
    NRF24_CSN_H();
 80002b6:	f7ff ffcd 	bl	8000254 <NRF24_CSN_H>

}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <NRF24_ReadReg>:

uint8_t NRF24_ReadReg(uint8_t Reg){
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b084      	sub	sp, #16
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	4603      	mov	r3, r0
 80002ca:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    NRF24_CSN_L();
 80002cc:	f7ff ffb8 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(R_REGISTER | Reg);
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffc8 	bl	8000268 <NRF24_SPI_Send>
    value = NRF24_SPI_Send(NOP);
 80002d8:	20ff      	movs	r0, #255	@ 0xff
 80002da:	f7ff ffc5 	bl	8000268 <NRF24_SPI_Send>
 80002de:	4603      	mov	r3, r0
 80002e0:	73fb      	strb	r3, [r7, #15]
    NRF24_CSN_H();
 80002e2:	f7ff ffb7 	bl	8000254 <NRF24_CSN_H>
    return value;
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <NRF24_WriteReg>:



void NRF24_WriteReg(uint8_t Reg, uint8_t Value){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]
    NRF24_CSN_L();
 8000300:	f7ff ff9e 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(W_REGISTER | Reg);
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffab 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(Value);
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffa7 	bl	8000268 <NRF24_SPI_Send>
    NRF24_CSN_H();
 800031a:	f7ff ff9b 	bl	8000254 <NRF24_CSN_H>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <NRF24_Init>:



void NRF24_Init(void){
 8000326:	b580      	push	{r7, lr}
 8000328:	b082      	sub	sp, #8
 800032a:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 800032c:	2005      	movs	r0, #5
 800032e:	f000 fcc3 	bl	8000cb8 <HAL_Delay>
	NRF24_WriteReg(SETUP_RETR, 0x5F);
 8000332:	215f      	movs	r1, #95	@ 0x5f
 8000334:	2004      	movs	r0, #4
 8000336:	f7ff ffdb 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x03);
 800033a:	2103      	movs	r1, #3
 800033c:	2006      	movs	r0, #6
 800033e:	f7ff ffd7 	bl	80002f0 <NRF24_WriteReg>
	//NRF24_CMD(0x7F);
	NRF24_ReadReg(FEATURE);
 8000342:	201d      	movs	r0, #29
 8000344:	f7ff ffbd 	bl	80002c2 <NRF24_ReadReg>
    NRF24_CSN_L();
 8000348:	f7ff ff7a 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(ACTIVATE);
 800034c:	2050      	movs	r0, #80	@ 0x50
 800034e:	f7ff ff8b 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x73);
 8000352:	2073      	movs	r0, #115	@ 0x73
 8000354:	f7ff ff88 	bl	8000268 <NRF24_SPI_Send>
    NRF24_CSN_H();
 8000358:	f7ff ff7c 	bl	8000254 <NRF24_CSN_H>
	NRF24_ReadReg(FEATURE);
 800035c:	201d      	movs	r0, #29
 800035e:	f7ff ffb0 	bl	80002c2 <NRF24_ReadReg>
	NRF24_WriteReg(DYNPD, 0x00);
 8000362:	2100      	movs	r1, #0
 8000364:	201c      	movs	r0, #28
 8000366:	f7ff ffc3 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(EN_AA, 0x3F);
 800036a:	213f      	movs	r1, #63	@ 0x3f
 800036c:	2001      	movs	r0, #1
 800036e:	f7ff ffbf 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03);
 8000372:	2103      	movs	r1, #3
 8000374:	2002      	movs	r0, #2
 8000376:	f7ff ffbb 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P0, 0x20);
 800037a:	2120      	movs	r1, #32
 800037c:	2011      	movs	r0, #17
 800037e:	f7ff ffb7 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, 0x20);
 8000382:	2120      	movs	r1, #32
 8000384:	2012      	movs	r0, #18
 8000386:	f7ff ffb3 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P2, 0x20);
 800038a:	2120      	movs	r1, #32
 800038c:	2013      	movs	r0, #19
 800038e:	f7ff ffaf 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P3, 0x20);
 8000392:	2120      	movs	r1, #32
 8000394:	2014      	movs	r0, #20
 8000396:	f7ff ffab 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P4, 0x20);
 800039a:	2120      	movs	r1, #32
 800039c:	2015      	movs	r0, #21
 800039e:	f7ff ffa7 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P5, 0x20);
 80003a2:	2120      	movs	r1, #32
 80003a4:	2016      	movs	r0, #22
 80003a6:	f7ff ffa3 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x03);
 80003aa:	2103      	movs	r1, #3
 80003ac:	2003      	movs	r0, #3
 80003ae:	f7ff ff9f 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 0x4C);
 80003b2:	214c      	movs	r1, #76	@ 0x4c
 80003b4:	2005      	movs	r0, #5
 80003b6:	f7ff ff9b 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70);
 80003ba:	2170      	movs	r1, #112	@ 0x70
 80003bc:	2007      	movs	r0, #7
 80003be:	f7ff ff97 	bl	80002f0 <NRF24_WriteReg>
	NRF24_CMD(FLUSH_RX);
 80003c2:	20e2      	movs	r0, #226	@ 0xe2
 80003c4:	f7ff ff6c 	bl	80002a0 <NRF24_CMD>
	NRF24_CMD(FLUSH_TX);
 80003c8:	20e1      	movs	r0, #225	@ 0xe1
 80003ca:	f7ff ff69 	bl	80002a0 <NRF24_CMD>
	NRF24_WriteReg(CONFIG, 0x0C);
 80003ce:	210c      	movs	r1, #12
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff8d 	bl	80002f0 <NRF24_WriteReg>

	uint8_t featureValue = NRF24_ReadReg(CONFIG);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff73 	bl	80002c2 <NRF24_ReadReg>
 80003dc:	4603      	mov	r3, r0
 80003de:	71fb      	strb	r3, [r7, #7]

	    if (featureValue != 0x0C) {
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b0c      	cmp	r3, #12
 80003e4:	d001      	beq.n	80003ea <NRF24_Init+0xc4>
	        Error_Handler();
 80003e6:	f000 fac7 	bl	8000978 <Error_Handler>
	    }

	NRF24_WriteReg(CONFIG, 0x0E);
 80003ea:	210e      	movs	r1, #14
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ff7f 	bl	80002f0 <NRF24_WriteReg>
	HAL_Delay(5);
 80003f2:	2005      	movs	r0, #5
 80003f4:	f000 fc60 	bl	8000cb8 <HAL_Delay>

	featureValue = NRF24_ReadReg(CONFIG);
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff ff62 	bl	80002c2 <NRF24_ReadReg>
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]

		if (featureValue != 0x0E) {
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b0e      	cmp	r3, #14
 8000406:	d001      	beq.n	800040c <NRF24_Init+0xe6>
		        Error_Handler();
 8000408:	f000 fab6 	bl	8000978 <Error_Handler>
		}
    NRF24_ReadReg(RF_SETUP);
 800040c:	2006      	movs	r0, #6
 800040e:	f7ff ff58 	bl	80002c2 <NRF24_ReadReg>
    NRF24_WriteReg(RF_SETUP, 0x03);
 8000412:	2103      	movs	r1, #3
 8000414:	2006      	movs	r0, #6
 8000416:	f7ff ff6b 	bl	80002f0 <NRF24_WriteReg>

    //Payload sizes P0 for outgoing P1 for incoming
	NRF24_WriteReg(RX_PW_P0, 0x08); //Change depending on size of payload sent
 800041a:	2108      	movs	r1, #8
 800041c:	2011      	movs	r0, #17
 800041e:	f7ff ff67 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, 0x02);
 8000422:	2102      	movs	r1, #2
 8000424:	2012      	movs	r0, #18
 8000426:	f7ff ff63 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P2, 0x02);
 800042a:	2102      	movs	r1, #2
 800042c:	2013      	movs	r0, #19
 800042e:	f7ff ff5f 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P3, 0x02);
 8000432:	2102      	movs	r1, #2
 8000434:	2014      	movs	r0, #20
 8000436:	f7ff ff5b 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P4, 0x02);
 800043a:	2102      	movs	r1, #2
 800043c:	2015      	movs	r0, #21
 800043e:	f7ff ff57 	bl	80002f0 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P5, 0x02);
 8000442:	2102      	movs	r1, #2
 8000444:	2016      	movs	r0, #22
 8000446:	f7ff ff53 	bl	80002f0 <NRF24_WriteReg>

}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <NRF24_TX_Address>:

}


//void NRF24_TX_Address(uint8_t TX_Address)
void NRF24_TX_Address(void){
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0

    NRF24_CSN_L();
 8000456:	f7ff fef3 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(W_REGISTER | RX_ADDR_P0);
 800045a:	202a      	movs	r0, #42	@ 0x2a
 800045c:	f7ff ff04 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x31);
 8000460:	2031      	movs	r0, #49	@ 0x31
 8000462:	f7ff ff01 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x4E);
 8000466:	204e      	movs	r0, #78	@ 0x4e
 8000468:	f7ff fefe 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x6F);
 800046c:	206f      	movs	r0, #111	@ 0x6f
 800046e:	f7ff fefb 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x64);
 8000472:	2064      	movs	r0, #100	@ 0x64
 8000474:	f7ff fef8 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x65);
 8000478:	2065      	movs	r0, #101	@ 0x65
 800047a:	f7ff fef5 	bl	8000268 <NRF24_SPI_Send>
    NRF24_CSN_H();
 800047e:	f7ff fee9 	bl	8000254 <NRF24_CSN_H>

    NRF24_CSN_L();
 8000482:	f7ff fedd 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(W_REGISTER | TX_ADDR);
 8000486:	2030      	movs	r0, #48	@ 0x30
 8000488:	f7ff feee 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x31);
 800048c:	2031      	movs	r0, #49	@ 0x31
 800048e:	f7ff feeb 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x4E);
 8000492:	204e      	movs	r0, #78	@ 0x4e
 8000494:	f7ff fee8 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x6F);
 8000498:	206f      	movs	r0, #111	@ 0x6f
 800049a:	f7ff fee5 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x64);
 800049e:	2064      	movs	r0, #100	@ 0x64
 80004a0:	f7ff fee2 	bl	8000268 <NRF24_SPI_Send>
    NRF24_SPI_Send(0x65);
 80004a4:	2065      	movs	r0, #101	@ 0x65
 80004a6:	f7ff fedf 	bl	8000268 <NRF24_SPI_Send>
    NRF24_CSN_H();
 80004aa:	f7ff fed3 	bl	8000254 <NRF24_CSN_H>

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <NRF24_TX_Mode>:
	NRF24_WriteReg(EN_RXADDR, 0x02);
	NRF24_CE_H();

}

void NRF24_TX_Mode(void){
 80004b2:	b580      	push	{r7, lr}
 80004b4:	af00      	add	r7, sp, #0

	NRF24_CE_L();
 80004b6:	f7ff feaf 	bl	8000218 <NRF24_CE_L>
	NRF24_WriteReg(CONFIG, 0x0E);
 80004ba:	210e      	movs	r1, #14
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff ff17 	bl	80002f0 <NRF24_WriteReg>
	NRF24_ReadReg(EN_RXADDR);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff fefd 	bl	80002c2 <NRF24_ReadReg>
	NRF24_WriteReg(EN_RXADDR, 0x03);
 80004c8:	2103      	movs	r1, #3
 80004ca:	2002      	movs	r0, #2
 80004cc:	f7ff ff10 	bl	80002f0 <NRF24_WriteReg>

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <NRF24_Transmit>:
	NRF24_WriteReg(STATUS, 0x70);

}


void NRF24_Transmit(uint8_t array[], int array_size) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
    NRF24_CSN_L();
 80004de:	f7ff feaf 	bl	8000240 <NRF24_CSN_L>
    NRF24_SPI_Send(W_TX_PAYLOAD);
 80004e2:	20a0      	movs	r0, #160	@ 0xa0
 80004e4:	f7ff fec0 	bl	8000268 <NRF24_SPI_Send>

    for (int i = 0; i < array_size; i++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e009      	b.n	8000502 <NRF24_Transmit+0x2e>
        NRF24_SPI_Send(array[i]);
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff feb6 	bl	8000268 <NRF24_SPI_Send>
    for (int i = 0; i < array_size; i++) {
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	dbf1      	blt.n	80004ee <NRF24_Transmit+0x1a>
    }

    NRF24_CSN_H();
 800050a:	f7ff fea3 	bl	8000254 <NRF24_CSN_H>
    NRF24_CE_H();
 800050e:	f7ff fe8d 	bl	800022c <NRF24_CE_H>

    uint8_t Check;
    uint32_t Timer = HAL_GetTick();
 8000512:	f000 fbc5 	bl	8000ca0 <HAL_GetTick>
 8000516:	6138      	str	r0, [r7, #16]
    do {
        NRF24_CSN_L();                // Pull CSN low
 8000518:	f7ff fe92 	bl	8000240 <NRF24_CSN_L>
        Check = NRF24_SPI_Send(NOP);  // Send NOP command and read status
 800051c:	20ff      	movs	r0, #255	@ 0xff
 800051e:	f7ff fea3 	bl	8000268 <NRF24_SPI_Send>
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
        NRF24_CSN_H();                // Pull CSN high to complete the SPI transaction
 8000526:	f7ff fe95 	bl	8000254 <NRF24_CSN_H>
    } while (Check == 0x0E && (HAL_GetTick() - Timer) < 100);
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b0e      	cmp	r3, #14
 800052e:	d106      	bne.n	800053e <NRF24_Transmit+0x6a>
 8000530:	f000 fbb6 	bl	8000ca0 <HAL_GetTick>
 8000534:	4602      	mov	r2, r0
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	2b63      	cmp	r3, #99	@ 0x63
 800053c:	d9ec      	bls.n	8000518 <NRF24_Transmit+0x44>
    NRF24_CE_L();
 800053e:	f7ff fe6b 	bl	8000218 <NRF24_CE_L>

    if (Check == 0x0E) {
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	2b0e      	cmp	r3, #14
 8000546:	d101      	bne.n	800054c <NRF24_Transmit+0x78>
        Error_Handler();
 8000548:	f000 fa16 	bl	8000978 <Error_Handler>
    }

    NRF24_WriteReg(STATUS, 0x70);
 800054c:	2170      	movs	r1, #112	@ 0x70
 800054e:	2007      	movs	r0, #7
 8000550:	f7ff fece 	bl	80002f0 <NRF24_WriteReg>
}
 8000554:	bf00      	nop
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <CalculateChecksum>:


uint8_t packedArray[sizeof(myStruct)];


uint16_t CalculateChecksum(RemotePackage TheStructure) {
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	463b      	mov	r3, r7
 8000564:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t checksum = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	82fb      	strh	r3, [r7, #22]
    uint8_t* data = (uint8_t*)&TheStructure;
 800056c:	463b      	mov	r3, r7
 800056e:	60fb      	str	r3, [r7, #12]

    // Calculate checksum excluding the checksum field itself
    for (size_t i = 0; i < sizeof(TheStructure) - sizeof(TheStructure.checksum); i++) {
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	e00a      	b.n	800058c <CalculateChecksum+0x30>
        checksum += data[i];
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	461a      	mov	r2, r3
 8000580:	8afb      	ldrh	r3, [r7, #22]
 8000582:	4413      	add	r3, r2
 8000584:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < sizeof(TheStructure) - sizeof(TheStructure.checksum); i++) {
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	3301      	adds	r3, #1
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	2b05      	cmp	r3, #5
 8000590:	d9f1      	bls.n	8000576 <CalculateChecksum+0x1a>
    }

    return checksum;
 8000592:	8afb      	ldrh	r3, [r7, #22]
}
 8000594:	4618      	mov	r0, r3
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <PackIntoArray>:

    return (receivedChecksum == calculatedChecksum);  // Return 1 if checksums match, 0 otherwise
}
*/

void PackIntoArray(RemotePackage *TheStructure, uint8_t array[]) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	TheStructure->checksum = CalculateChecksum(*TheStructure);  // Calculate and set the checksum
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6819      	ldr	r1, [r3, #0]
 80005ae:	460a      	mov	r2, r1
 80005b0:	6859      	ldr	r1, [r3, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	4610      	mov	r0, r2
 80005b6:	4619      	mov	r1, r3
 80005b8:	f7ff ffd0 	bl	800055c <CalculateChecksum>
 80005bc:	4603      	mov	r3, r0
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	80da      	strh	r2, [r3, #6]

    uint8_t* data = (uint8_t*)TheStructure;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < sizeof(RemotePackage); i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e00a      	b.n	80005e4 <PackIntoArray+0x44>
        array[i] = data[i];  // Pack the structure into the array
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	441a      	add	r2, r3
 80005d4:	6839      	ldr	r1, [r7, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	440b      	add	r3, r1
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < sizeof(RemotePackage); i++) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	d9f1      	bls.n	80005ce <PackIntoArray+0x2e>
    }
}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <UpdateJoystickValues>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

void UpdateJoystickValues(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    // Start ADC Conversion (in scan mode, it will automatically handle both channels)
    HAL_ADC_Start(&hadc1);
 80005f8:	480e      	ldr	r0, [pc, #56]	@ (8000634 <UpdateJoystickValues+0x40>)
 80005fa:	f000 ff7d 	bl	80014f8 <HAL_ADC_Start>

    // Poll for first conversion (Joy1X - Channel 3)
    HAL_ADC_PollForConversion(&hadc1, 5);
 80005fe:	2105      	movs	r1, #5
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <UpdateJoystickValues+0x40>)
 8000602:	f001 f869 	bl	80016d8 <HAL_ADC_PollForConversion>
    myStruct.Joy1X = HAL_ADC_GetValue(&hadc1); // Store X-axis value (Channel 3)
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <UpdateJoystickValues+0x40>)
 8000608:	f001 fa6e 	bl	8001ae8 <HAL_ADC_GetValue>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <UpdateJoystickValues+0x44>)
 8000612:	805a      	strh	r2, [r3, #2]

    // Poll for second conversion (Joy1Y - Channel 4)
    HAL_ADC_PollForConversion(&hadc1, 5);
 8000614:	2105      	movs	r1, #5
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <UpdateJoystickValues+0x40>)
 8000618:	f001 f85e 	bl	80016d8 <HAL_ADC_PollForConversion>
    myStruct.Joy1Y = HAL_ADC_GetValue(&hadc1); // Store Y-axis value (Channel 4)
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <UpdateJoystickValues+0x40>)
 800061e:	f001 fa63 	bl	8001ae8 <HAL_ADC_GetValue>
 8000622:	4603      	mov	r3, r0
 8000624:	b29a      	uxth	r2, r3
 8000626:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <UpdateJoystickValues+0x44>)
 8000628:	809a      	strh	r2, [r3, #4]

    // Stop ADC Conversion
    HAL_ADC_Stop(&hadc1);
 800062a:	4802      	ldr	r0, [pc, #8]	@ (8000634 <UpdateJoystickValues+0x40>)
 800062c:	f001 f820 	bl	8001670 <HAL_ADC_Stop>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000038 	.word	0x20000038
 8000638:	20000028 	.word	0x20000028

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fac9 	bl	8000bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f836 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 f93a 	bl	80008c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064c:	f000 f8fa 	bl	8000844 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000650:	f000 f870 	bl	8000734 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8000654:	f7ff fe67 	bl	8000326 <NRF24_Init>
  NRF24_TX_Address();
 8000658:	f7ff fefb 	bl	8000452 <NRF24_TX_Address>
  NRF24_TX_Mode();
 800065c:	f7ff ff29 	bl	80004b2 <NRF24_TX_Mode>
  HAL_ADC_Start_IT(&hadc1);
 8000660:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <main+0x68>)
 8000662:	f001 f911 	bl	8001888 <HAL_ADC_Start_IT>

  myStruct.checkbyte = 43690;
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <main+0x6c>)
 8000668:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800066c:	801a      	strh	r2, [r3, #0]
  {




	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <main+0x70>)
 8000676:	f002 fb07 	bl	8002c88 <HAL_GPIO_WritePin>

	  UpdateJoystickValues();
 800067a:	f7ff ffbb 	bl	80005f4 <UpdateJoystickValues>

	  PackIntoArray(&myStruct, packedArray);
 800067e:	490c      	ldr	r1, [pc, #48]	@ (80006b0 <main+0x74>)
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <main+0x6c>)
 8000682:	f7ff ff8d 	bl	80005a0 <PackIntoArray>
	  NRF24_Transmit(packedArray, sizeof(packedArray));
 8000686:	2108      	movs	r1, #8
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <main+0x74>)
 800068a:	f7ff ff23 	bl	80004d4 <NRF24_Transmit>


	  //NRF24_TransmitBasic();


	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <main+0x70>)
 8000696:	f002 faf7 	bl	8002c88 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fb0c 	bl	8000cb8 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006a0:	bf00      	nop
 80006a2:	e7e4      	b.n	800066e <main+0x32>
 80006a4:	20000038 	.word	0x20000038
 80006a8:	20000028 	.word	0x20000028
 80006ac:	48000400 	.word	0x48000400
 80006b0:	20000030 	.word	0x20000030

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2238      	movs	r2, #56	@ 0x38
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fec4 	bl	8004450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006da:	f002 faed 	bl	8002cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2340      	movs	r3, #64	@ 0x40
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb93 	bl	8002e20 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000700:	f000 f93a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	2301      	movs	r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fe91 	bl	8003444 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000728:	f000 f926 	bl	8000978 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	@ 0x30
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2220      	movs	r2, #32
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fe7f 	bl	8004450 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000752:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000754:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800075a:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <MX_ADC1_Init+0x104>)
 800075c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <MX_ADC1_Init+0x104>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800076e:	4b32      	ldr	r3, [pc, #200]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000774:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000776:	2201      	movs	r2, #1
 8000778:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_ADC1_Init+0x104>)
 800077c:	2208      	movs	r2, #8
 800077e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000782:	2200      	movs	r2, #0
 8000784:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000788:	2201      	movs	r2, #1
 800078a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_ADC1_Init+0x104>)
 800078e:	2202      	movs	r2, #2
 8000790:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_ADC1_Init+0x104>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	481e      	ldr	r0, [pc, #120]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007c0:	f000 fd16 	bl	80011f0 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80007ca:	f000 f8d5 	bl	8000978 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d6:	4619      	mov	r1, r3
 80007d8:	4817      	ldr	r0, [pc, #92]	@ (8000838 <MX_ADC1_Init+0x104>)
 80007da:	f001 ff4b 	bl	8002674 <HAL_ADCEx_MultiModeConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007e4:	f000 f8c8 	bl	8000978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_ADC1_Init+0x108>)
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ec:	2306      	movs	r3, #6
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f4:	237f      	movs	r3, #127	@ 0x7f
 80007f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f8:	2304      	movs	r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000806:	f001 f97d 	bl	8001b04 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000810:	f000 f8b2 	bl	8000978 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_ADC1_Init+0x10c>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000818:	230c      	movs	r3, #12
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_ADC1_Init+0x104>)
 8000822:	f001 f96f 	bl	8001b04 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800082c:	f000 f8a4 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	@ 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000038 	.word	0x20000038
 800083c:	0c900008 	.word	0x0c900008
 8000840:	10c00010 	.word	0x10c00010

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <MX_SPI1_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000850:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800085e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000862:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000876:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000892:	2207      	movs	r2, #7
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI1_Init+0x74>)
 800089e:	2208      	movs	r2, #8
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_SPI1_Init+0x74>)
 80008a4:	f003 f9a2 	bl	8003bec <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f863 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000a4 	.word	0x200000a4
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_GPIO_Init+0xb0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090e:	f002 f9bb 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f002 f9b5 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <MX_GPIO_Init+0xb4>)
 8000926:	f002 f9af 	bl	8002c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800092a:	2312      	movs	r3, #18
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f002 f81e 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0xb4>)
 8000962:	f002 f80f 	bl	8002984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	HAL_Delay(10);
 800097c:	200a      	movs	r0, #10
 800097e:	f000 f99b 	bl	8000cb8 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000982:	b672      	cpsid	i
}
 8000984:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <Error_Handler+0xe>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	@ 0x60
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009c2:	f002 fa1d 	bl	8002e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09a      	sub	sp, #104	@ 0x68
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2244      	movs	r2, #68	@ 0x44
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fd2b 	bl	8004450 <memset>
  if(hadc->Instance==ADC1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a02:	d134      	bne.n	8000a6e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a0a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fef9 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a20:	f7ff ffaa 	bl	8000978 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <HAL_ADC_MspInit+0xa4>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a54:	230c      	movs	r3, #12
 8000a56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f001 ff8b 	bl	8002984 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a6e:	bf00      	nop
 8000a70:	3768      	adds	r7, #104	@ 0x68
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <HAL_SPI_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a16      	ldr	r2, [pc, #88]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_SPI_MspInit+0x80>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ace:	23e0      	movs	r3, #224	@ 0xe0
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aec:	f001 ff4a 	bl	8002984 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013000 	.word	0x40013000
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <NMI_Handler+0x4>

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <MemManage_Handler+0x4>

08000b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f891 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff ffea 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f003 fc55 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fd41 	bl	800063c <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc8:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd0:	2000010c 	.word	0x2000010c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>

08000bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f001 fe9d 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 f80e 	bl	8000c08 <HAL_InitTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	e001      	b.n	8000bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf8:	f7ff fec8 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]

}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c14:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <HAL_InitTick+0x68>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d022      	beq.n	8000c62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_InitTick+0x6c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <HAL_InitTick+0x68>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 fe9a 	bl	800296a <HAL_SYSTICK_Config>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10f      	bne.n	8000c5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b0f      	cmp	r3, #15
 8000c40:	d809      	bhi.n	8000c56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c42:	2200      	movs	r2, #0
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4a:	f001 fe74 	bl	8002936 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_InitTick+0x70>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e007      	b.n	8000c66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e004      	b.n	8000c66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e001      	b.n	8000c66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x1c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a03      	ldr	r2, [pc, #12]	@ (8000c98 <HAL_IncTick+0x1c>)
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	20000108 	.word	0x20000108
 8000c9c:	20000008 	.word	0x20000008

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000108 	.word	0x20000108

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff ffee 	bl	8000ca0 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d004      	beq.n	8000cdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_Delay+0x40>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cdc:	bf00      	nop
 8000cde:	f7ff ffdf 	bl	8000ca0 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8f7      	bhi.n	8000cde <HAL_Delay+0x26>
  {
  }
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008

08000cfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	609a      	str	r2, [r3, #8]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3360      	adds	r3, #96	@ 0x60
 8000d76:	461a      	mov	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <LL_ADC_SetOffset+0x44>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	4313      	orrs	r3, r2
 8000d94:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	03fff000 	.word	0x03fff000

08000dac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3360      	adds	r3, #96	@ 0x60
 8000dba:	461a      	mov	r2, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3360      	adds	r3, #96	@ 0x60
 8000de8:	461a      	mov	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b087      	sub	sp, #28
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3360      	adds	r3, #96	@ 0x60
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3360      	adds	r3, #96	@ 0x60
 8000e54:	461a      	mov	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	615a      	str	r2, [r3, #20]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3330      	adds	r3, #48	@ 0x30
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	211f      	movs	r1, #31
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	401a      	ands	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	0e9b      	lsrs	r3, r3, #26
 8000efe:	f003 011f 	and.w	r1, r3, #31
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	f003 031f 	and.w	r3, r3, #31
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b087      	sub	sp, #28
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3314      	adds	r3, #20
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	0e5b      	lsrs	r3, r3, #25
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	0d1b      	lsrs	r3, r3, #20
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2107      	movs	r1, #7
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	401a      	ands	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	0d1b      	lsrs	r3, r3, #20
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f68:	bf00      	nop
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0318 	and.w	r3, r3, #24
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f98:	40d9      	lsrs	r1, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	0007ffff 	.word	0x0007ffff

08000fbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 031f 	and.w	r3, r3, #31
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6093      	str	r3, [r2, #8]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800102c:	d101      	bne.n	8001032 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001050:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001054:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800107c:	d101      	bne.n	8001082 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_IsEnabled+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_IsEnabled+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d101      	bne.n	800111e <LL_ADC_IsDisableOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_IsDisableOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800113c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001140:	f043 0204 	orr.w	r2, r3, #4
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001168:	f043 0210 	orr.w	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b04      	cmp	r3, #4
 800118e:	d101      	bne.n	8001194 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011b6:	f043 0220 	orr.w	r2, r3, #32
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d101      	bne.n	80011e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e167      	b.n	80014da <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fbdb 	bl	80009d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fef1 	bl	8001018 <LL_ADC_IsDeepPowerDownEnabled>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fed7 	bl	8000ff4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff0c 	bl	8001068 <LL_ADC_IsInternalRegulatorEnabled>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d115      	bne.n	8001282 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fef0 	bl	8001040 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001260:	4ba0      	ldr	r3, [pc, #640]	@ (80014e4 <HAL_ADC_Init+0x2f4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	099b      	lsrs	r3, r3, #6
 8001266:	4aa0      	ldr	r2, [pc, #640]	@ (80014e8 <HAL_ADC_Init+0x2f8>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	3301      	adds	r3, #1
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001274:	e002      	b.n	800127c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3b01      	subs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff feee 	bl	8001068 <LL_ADC_IsInternalRegulatorEnabled>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001296:	f043 0210 	orr.w	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff62 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 80012b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f040 8100 	bne.w	80014c8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 80fc 	bne.w	80014c8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012d8:	f043 0202 	orr.w	r2, r3, #2
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fefb 	bl	80010e0 <LL_ADC_IsEnabled>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80012f4:	f7ff fef4 	bl	80010e0 <LL_ADC_IsEnabled>
 80012f8:	4604      	mov	r4, r0
 80012fa:	487c      	ldr	r0, [pc, #496]	@ (80014ec <HAL_ADC_Init+0x2fc>)
 80012fc:	f7ff fef0 	bl	80010e0 <LL_ADC_IsEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	4323      	orrs	r3, r4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d105      	bne.n	8001314 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4619      	mov	r1, r3
 800130e:	4878      	ldr	r0, [pc, #480]	@ (80014f0 <HAL_ADC_Init+0x300>)
 8001310:	f7ff fcf4 	bl	8000cfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7f5b      	ldrb	r3, [r3, #29]
 8001318:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800131e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001324:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800132a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001332:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800133e:	2b01      	cmp	r3, #1
 8001340:	d106      	bne.n	8001350 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	3b01      	subs	r3, #1
 8001348:	045b      	lsls	r3, r3, #17
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d009      	beq.n	800136c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <HAL_ADC_Init+0x304>)
 8001374:	4013      	ands	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	430b      	orrs	r3, r1
 800137e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff15 	bl	80011ca <LL_ADC_INJ_IsConversionOngoing>
 80013a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d16d      	bne.n	8001484 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d16a      	bne.n	8001484 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d017      	beq.n	8001410 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80013ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80013f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6911      	ldr	r1, [r2, #16]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	430b      	orrs	r3, r1
 800140a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800140e:	e013      	b.n	8001438 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800141e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001434:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800143e:	2b01      	cmp	r3, #1
 8001440:	d118      	bne.n	8001474 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001458:	4311      	orrs	r1, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800145e:	4311      	orrs	r1, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001464:	430a      	orrs	r2, r1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	e007      	b.n	8001484 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10c      	bne.n	80014a6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f023 010f 	bic.w	r1, r3, #15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	1e5a      	subs	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a4:	e007      	b.n	80014b6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 020f 	bic.w	r2, r2, #15
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ba:	f023 0303 	bic.w	r3, r3, #3
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014c6:	e007      	b.n	80014d8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	f043 0210 	orr.w	r2, r3, #16
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000000 	.word	0x20000000
 80014e8:	053e2d63 	.word	0x053e2d63
 80014ec:	50000100 	.word	0x50000100
 80014f0:	50000300 	.word	0x50000300
 80014f4:	fff04007 	.word	0xfff04007

080014f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001500:	4859      	ldr	r0, [pc, #356]	@ (8001668 <HAL_ADC_Start+0x170>)
 8001502:	f7ff fd5b 	bl	8000fbc <LL_ADC_GetMultimode>
 8001506:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe35 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 809f 	bne.w	8001658 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_ADC_Start+0x30>
 8001524:	2302      	movs	r3, #2
 8001526:	e09a      	b.n	800165e <HAL_ADC_Start+0x166>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 ff93 	bl	800245c <ADC_Enable>
 8001536:	4603      	mov	r3, r0
 8001538:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8086 	bne.w	800164e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001546:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a44      	ldr	r2, [pc, #272]	@ (800166c <HAL_ADC_Start+0x174>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d002      	beq.n	8001566 <HAL_ADC_Start+0x6e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	e001      	b.n	800156a <HAL_ADC_Start+0x72>
 8001566:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	4293      	cmp	r3, r2
 8001570:	d002      	beq.n	8001578 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001596:	f023 0206 	bic.w	r2, r3, #6
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	661a      	str	r2, [r3, #96]	@ 0x60
 800159e:	e002      	b.n	80015a6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	221c      	movs	r2, #28
 80015ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a2c      	ldr	r2, [pc, #176]	@ (800166c <HAL_ADC_Start+0x174>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d002      	beq.n	80015c6 <HAL_ADC_Start+0xce>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	e001      	b.n	80015ca <HAL_ADC_Start+0xd2>
 80015c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d008      	beq.n	80015e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d002      	beq.n	80015e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d114      	bne.n	800160e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd90 	bl	800112c <LL_ADC_REG_StartConversion>
 800160c:	e026      	b.n	800165c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <HAL_ADC_Start+0x174>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d002      	beq.n	800162a <HAL_ADC_Start+0x132>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e001      	b.n	800162e <HAL_ADC_Start+0x136>
 800162a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800162e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00f      	beq.n	800165c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001640:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001644:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800164c:	e006      	b.n	800165c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001656:	e001      	b.n	800165c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	50000300 	.word	0x50000300
 800166c:	50000100 	.word	0x50000100

08001670 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Stop+0x16>
 8001682:	2302      	movs	r3, #2
 8001684:	e023      	b.n	80016ce <HAL_ADC_Stop+0x5e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800168e:	2103      	movs	r1, #3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fe27 	bl	80022e4 <ADC_ConversionStop>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 ff61 	bl	8002568 <ADC_Disable>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016e2:	4867      	ldr	r0, [pc, #412]	@ (8001880 <HAL_ADC_PollForConversion+0x1a8>)
 80016e4:	f7ff fc6a 	bl	8000fbc <LL_ADC_GetMultimode>
 80016e8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d102      	bne.n	80016f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016f2:	2308      	movs	r3, #8
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e02a      	b.n	800174e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d002      	beq.n	800170a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b09      	cmp	r3, #9
 8001708:	d111      	bne.n	800172e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	f043 0220 	orr.w	r2, r3, #32
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0a6      	b.n	8001876 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001728:	2304      	movs	r3, #4
 800172a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800172c:	e00f      	b.n	800174e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800172e:	4854      	ldr	r0, [pc, #336]	@ (8001880 <HAL_ADC_PollForConversion+0x1a8>)
 8001730:	f7ff fc52 	bl	8000fd8 <LL_ADC_GetMultiDMATransfer>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e095      	b.n	8001876 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800174a:	2304      	movs	r3, #4
 800174c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800174e:	f7ff faa7 	bl	8000ca0 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001754:	e021      	b.n	800179a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175c:	d01d      	beq.n	800179a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800175e:	f7ff fa9f 	bl	8000ca0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d302      	bcc.n	8001774 <HAL_ADC_PollForConversion+0x9c>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d112      	bne.n	800179a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001786:	f043 0204 	orr.w	r2, r3, #4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e06d      	b.n	8001876 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0d6      	beq.n	8001756 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb71 	bl	8000ea0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01c      	beq.n	80017fe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7f5b      	ldrb	r3, [r3, #29]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d118      	bne.n	80017fe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d111      	bne.n	80017fe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a20      	ldr	r2, [pc, #128]	@ (8001884 <HAL_ADC_PollForConversion+0x1ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d002      	beq.n	800180e <HAL_ADC_PollForConversion+0x136>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	e001      	b.n	8001812 <HAL_ADC_PollForConversion+0x13a>
 800180e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	4293      	cmp	r3, r2
 8001818:	d008      	beq.n	800182c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d002      	beq.n	800182c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d104      	bne.n	8001836 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	e00d      	b.n	8001852 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <HAL_ADC_PollForConversion+0x1ac>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d002      	beq.n	8001846 <HAL_ADC_PollForConversion+0x16e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	e001      	b.n	800184a <HAL_ADC_PollForConversion+0x172>
 8001846:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800184a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d104      	bne.n	8001862 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2208      	movs	r2, #8
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e008      	b.n	8001874 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d103      	bne.n	8001874 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	220c      	movs	r2, #12
 8001872:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	50000300 	.word	0x50000300
 8001884:	50000100 	.word	0x50000100

08001888 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001890:	4893      	ldr	r0, [pc, #588]	@ (8001ae0 <HAL_ADC_Start_IT+0x258>)
 8001892:	f7ff fb93 	bl	8000fbc <LL_ADC_GetMultimode>
 8001896:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fc6d 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 8113 	bne.w	8001ad0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Start_IT+0x30>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e10e      	b.n	8001ad6 <HAL_ADC_Start_IT+0x24e>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fdcb 	bl	800245c <ADC_Enable>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 80fa 	bne.w	8001ac6 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae4 <HAL_ADC_Start_IT+0x25c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d002      	beq.n	80018f6 <HAL_ADC_Start_IT+0x6e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	e001      	b.n	80018fa <HAL_ADC_Start_IT+0x72>
 80018f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	4293      	cmp	r3, r2
 8001900:	d002      	beq.n	8001908 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001924:	f023 0206 	bic.w	r2, r3, #6
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	661a      	str	r2, [r3, #96]	@ 0x60
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	221c      	movs	r2, #28
 800193a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 021c 	bic.w	r2, r2, #28
 8001952:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d108      	bne.n	800196e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0208 	orr.w	r2, r2, #8
 800196a:	605a      	str	r2, [r3, #4]
          break;
 800196c:	e008      	b.n	8001980 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	605a      	str	r2, [r3, #4]
          break;
 800197e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0210 	orr.w	r2, r2, #16
 8001996:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a51      	ldr	r2, [pc, #324]	@ (8001ae4 <HAL_ADC_Start_IT+0x25c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d002      	beq.n	80019a8 <HAL_ADC_Start_IT+0x120>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e001      	b.n	80019ac <HAL_ADC_Start_IT+0x124>
 80019a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d008      	beq.n	80019c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d002      	beq.n	80019c6 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b09      	cmp	r3, #9
 80019c4:	d13a      	bne.n	8001a3c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02d      	beq.n	8001a30 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d110      	bne.n	8001a0e <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0220 	bic.w	r2, r2, #32
 80019fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a0a:	605a      	str	r2, [r3, #4]
              break;
 8001a0c:	e010      	b.n	8001a30 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a1c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0220 	orr.w	r2, r2, #32
 8001a2c:	605a      	str	r2, [r3, #4]
              break;
 8001a2e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fb79 	bl	800112c <LL_ADC_REG_StartConversion>
 8001a3a:	e04b      	b.n	8001ad4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <HAL_ADC_Start_IT+0x25c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d002      	beq.n	8001a58 <HAL_ADC_Start_IT+0x1d0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e001      	b.n	8001a5c <HAL_ADC_Start_IT+0x1d4>
 8001a58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a5c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d034      	beq.n	8001ad4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d110      	bne.n	8001aa4 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0220 	bic.w	r2, r2, #32
 8001a90:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aa0:	605a      	str	r2, [r3, #4]
              break;
 8001aa2:	e017      	b.n	8001ad4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ab2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	605a      	str	r2, [r3, #4]
              break;
 8001ac4:	e006      	b.n	8001ad4 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001ace:	e001      	b.n	8001ad4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	50000300 	.word	0x50000300
 8001ae4:	50000100 	.word	0x50000100

08001ae8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0b6      	sub	sp, #216	@ 0xd8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e3c8      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x7b4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fb22 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 83ad 	bne.w	800229a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f7ff f9ba 	bl	8000ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fb10 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 8001b5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fb30 	bl	80011ca <LL_ADC_INJ_IsConversionOngoing>
 8001b6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 81d9 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 81d4 	bne.w	8001f2a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b8a:	d10f      	bne.n	8001bac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f9c1 	bl	8000f1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f968 	bl	8000e7a <LL_ADC_SetSamplingTimeCommonConfig>
 8001baa:	e00e      	b.n	8001bca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f7ff f9b0 	bl	8000f1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f958 	bl	8000e7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d022      	beq.n	8001c32 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6919      	ldr	r1, [r3, #16]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bfc:	f7ff f8b2 	bl	8000d64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6919      	ldr	r1, [r3, #16]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f7ff f8fe 	bl	8000e0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d102      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x124>
 8001c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c26:	e000      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x126>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f7ff f90a 	bl	8000e44 <LL_ADC_SetOffsetSaturation>
 8001c30:	e17b      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f8b7 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10a      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x15a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f8ac 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001c54:	4603      	mov	r3, r0
 8001c56:	0e9b      	lsrs	r3, r3, #26
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	e01e      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x198>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f8a1 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	e004      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1b0>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0e9b      	lsrs	r3, r3, #26
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	e018      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1e2>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	e004      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001cdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d106      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f870 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f854 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10a      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x220>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f849 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	f003 021f 	and.w	r2, r3, #31
 8001d22:	e01e      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x25e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f83e 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d52:	2320      	movs	r3, #32
 8001d54:	e004      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x276>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0e9b      	lsrs	r3, r3, #26
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	e018      	b.n	8001dac <HAL_ADC_ConfigChannel+0x2a8>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	e004      	b.n	8001dac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d106      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	2101      	movs	r1, #1
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f80d 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fff1 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x2e6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe ffe6 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	e01e      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x324>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2102      	movs	r1, #2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ffdb 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	e004      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x33c>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0e9b      	lsrs	r3, r3, #26
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	e016      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x36a>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e004      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe ffac 	bl	8000dd8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2103      	movs	r1, #3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff90 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10a      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x3a8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ff85 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 021f 	and.w	r2, r3, #31
 8001eaa:	e017      	b.n	8001edc <HAL_ADC_ConfigChannel+0x3d8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ff7a 	bl	8000dac <LL_ADC_GetOffsetChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e003      	b.n	8001eda <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x3f0>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0e9b      	lsrs	r3, r3, #26
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	e011      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x414>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e003      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2103      	movs	r1, #3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ff57 	bl	8000dd8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f8d6 	bl	80010e0 <LL_ADC_IsEnabled>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8140 	bne.w	80021bc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff f813 	bl	8000f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a8f      	ldr	r2, [pc, #572]	@ (8002190 <HAL_ADC_ConfigChannel+0x68c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 8131 	bne.w	80021bc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x47e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	bf94      	ite	ls
 8001f7a:	2301      	movls	r3, #1
 8001f7c:	2300      	movhi	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e019      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x4b2>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f92:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d079      	beq.n	80020ae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x4d2>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e9b      	lsrs	r3, r3, #26
 8001fcc:	3301      	adds	r3, #1
 8001fce:	069b      	lsls	r3, r3, #26
 8001fd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fd4:	e015      	b.n	8002002 <HAL_ADC_ConfigChannel+0x4fe>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e003      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x51e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	3301      	adds	r3, #1
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	e017      	b.n	8002052 <HAL_ADC_ConfigChannel+0x54e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002032:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800203e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2101      	movs	r1, #1
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	ea42 0103 	orr.w	r1, r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x574>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	e018      	b.n	80020aa <HAL_ADC_ConfigChannel+0x5a6>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800208a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 021f 	and.w	r2, r3, #31
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020aa:	430b      	orrs	r3, r1
 80020ac:	e081      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x5c6>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	3301      	adds	r3, #1
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020c8:	e015      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x5f2>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	069b      	lsls	r3, r3, #26
 80020f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x612>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	3301      	adds	r3, #1
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2101      	movs	r1, #1
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	e017      	b.n	8002146 <HAL_ADC_ConfigChannel+0x642>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	61fb      	str	r3, [r7, #28]
  return result;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	ea42 0103 	orr.w	r1, r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10d      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x66e>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	051b      	lsls	r3, r3, #20
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002170:	e01e      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x6ac>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	613b      	str	r3, [r7, #16]
  return result;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800218a:	2320      	movs	r3, #32
 800218c:	e006      	b.n	800219c <HAL_ADC_ConfigChannel+0x698>
 800218e:	bf00      	nop
 8002190:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	f003 021f 	and.w	r2, r3, #31
 80021a2:	4613      	mov	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	3b1e      	subs	r3, #30
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe feb1 	bl	8000f1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b3f      	ldr	r3, [pc, #252]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d071      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	483e      	ldr	r0, [pc, #248]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80021ca:	f7fe fdbd 	bl	8000d48 <LL_ADC_GetCommonPathInternalCh>
 80021ce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x6e2>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a3a      	ldr	r2, [pc, #232]	@ (80022cc <HAL_ADC_ConfigChannel+0x7c8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d127      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d121      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021fa:	d157      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002200:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002204:	4619      	mov	r1, r3
 8002206:	482f      	ldr	r0, [pc, #188]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002208:	f7fe fd8b 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220c:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	4a30      	ldr	r2, [pc, #192]	@ (80022d4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002226:	e002      	b.n	800222e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f9      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002234:	e03a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a27      	ldr	r2, [pc, #156]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7d4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d113      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002244:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02a      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225e:	4619      	mov	r1, r3
 8002260:	4818      	ldr	r0, [pc, #96]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002262:	f7fe fd5e 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002266:	e021      	b.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11c      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a16      	ldr	r2, [pc, #88]	@ (80022dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d011      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800228c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002290:	4619      	mov	r1, r3
 8002292:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002294:	f7fe fd45 	bl	8000d22 <LL_ADC_SetCommonPathInternalCh>
 8002298:	e008      	b.n	80022ac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	f043 0220 	orr.w	r2, r3, #32
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022b4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	37d8      	adds	r7, #216	@ 0xd8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	80080000 	.word	0x80080000
 80022c4:	50000300 	.word	0x50000300
 80022c8:	c3210000 	.word	0xc3210000
 80022cc:	90c00010 	.word	0x90c00010
 80022d0:	20000000 	.word	0x20000000
 80022d4:	053e2d63 	.word	0x053e2d63
 80022d8:	c7520000 	.word	0xc7520000
 80022dc:	50000100 	.word	0x50000100
 80022e0:	cb840000 	.word	0xcb840000

080022e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ff3e 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 8002300:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe ff5f 	bl	80011ca <LL_ADC_INJ_IsConversionOngoing>
 800230c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8098 	beq.w	800244c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02a      	beq.n	8002380 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7f5b      	ldrb	r3, [r3, #29]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d126      	bne.n	8002380 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7f1b      	ldrb	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d122      	bne.n	8002380 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800233a:	2301      	movs	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800233e:	e014      	b.n	800236a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4a45      	ldr	r2, [pc, #276]	@ (8002458 <ADC_ConversionStop+0x174>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d90d      	bls.n	8002364 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e074      	b.n	800244e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3301      	adds	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	d1e3      	bne.n	8002340 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2240      	movs	r2, #64	@ 0x40
 800237e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d014      	beq.n	80023b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fef6 	bl	800117c <LL_ADC_REG_IsConversionOngoing>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe feb3 	bl	8001106 <LL_ADC_IsDisableOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fed2 	bl	8001154 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d014      	beq.n	80023e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe ff05 	bl	80011ca <LL_ADC_INJ_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fe9b 	bl	8001106 <LL_ADC_IsDisableOngoing>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fee1 	bl	80011a2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d005      	beq.n	80023f2 <ADC_ConversionStop+0x10e>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d105      	bne.n	80023f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023ec:	230c      	movs	r3, #12
 80023ee:	617b      	str	r3, [r7, #20]
        break;
 80023f0:	e005      	b.n	80023fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023f2:	2308      	movs	r3, #8
 80023f4:	617b      	str	r3, [r7, #20]
        break;
 80023f6:	e002      	b.n	80023fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023f8:	2304      	movs	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
        break;
 80023fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023fe:	f7fe fc4f 	bl	8000ca0 <HAL_GetTick>
 8002402:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002404:	e01b      	b.n	800243e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002406:	f7fe fc4b 	bl	8000ca0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b05      	cmp	r3, #5
 8002412:	d914      	bls.n	800243e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e007      	b.n	800244e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1dc      	bne.n	8002406 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	a33fffff 	.word	0xa33fffff

0800245c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fe37 	bl	80010e0 <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d169      	bne.n	800254c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b36      	ldr	r3, [pc, #216]	@ (8002558 <ADC_Enable+0xfc>)
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e055      	b.n	800254e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fdf2 	bl	8001090 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024ac:	482b      	ldr	r0, [pc, #172]	@ (800255c <ADC_Enable+0x100>)
 80024ae:	f7fe fc4b 	bl	8000d48 <LL_ADC_GetCommonPathInternalCh>
 80024b2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024bc:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <ADC_Enable+0x104>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	4a28      	ldr	r2, [pc, #160]	@ (8002564 <ADC_Enable+0x108>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024d6:	e002      	b.n	80024de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024e4:	f7fe fbdc 	bl	8000ca0 <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ea:	e028      	b.n	800253e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fdf5 	bl	80010e0 <LL_ADC_IsEnabled>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fdc5 	bl	8001090 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002506:	f7fe fbcb 	bl	8000ca0 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d914      	bls.n	800253e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d00d      	beq.n	800253e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e007      	b.n	800254e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d1cf      	bne.n	80024ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	8000003f 	.word	0x8000003f
 800255c:	50000300 	.word	0x50000300
 8002560:	20000000 	.word	0x20000000
 8002564:	053e2d63 	.word	0x053e2d63

08002568 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fdc6 	bl	8001106 <LL_ADC_IsDisableOngoing>
 800257a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fdad 	bl	80010e0 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d047      	beq.n	800261c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d144      	bne.n	800261c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030d 	and.w	r3, r3, #13
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10c      	bne.n	80025ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fd87 	bl	80010b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2203      	movs	r2, #3
 80025b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fb75 	bl	8000ca0 <HAL_GetTick>
 80025b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025b8:	e029      	b.n	800260e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	f043 0210 	orr.w	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e023      	b.n	800261e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025d6:	f7fe fb63 	bl	8000ca0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d914      	bls.n	800260e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f6:	f043 0210 	orr.w	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1dc      	bne.n	80025d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <LL_ADC_IsEnabled>:
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <LL_ADC_IsEnabled+0x18>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_IsEnabled+0x1a>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_REG_IsConversionOngoing>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b04      	cmp	r3, #4
 800265e:	d101      	bne.n	8002664 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b0a1      	sub	sp, #132	@ 0x84
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800268e:	2302      	movs	r3, #2
 8002690:	e08b      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800269a:	2300      	movs	r3, #0
 800269c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800269e:	2300      	movs	r3, #0
 80026a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026aa:	d102      	bne.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026ac:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	e001      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e06a      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffb8 	bl	800264c <LL_ADC_REG_IsConversionOngoing>
 80026dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ffb2 	bl	800264c <LL_ADC_REG_IsConversionOngoing>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d14c      	bne.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d149      	bne.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80026f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d028      	beq.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002712:	035b      	lsls	r3, r3, #13
 8002714:	430b      	orrs	r3, r1
 8002716:	431a      	orrs	r2, r3
 8002718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800271a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800271c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002720:	f7ff ff81 	bl	8002626 <LL_ADC_IsEnabled>
 8002724:	4604      	mov	r4, r0
 8002726:	4823      	ldr	r0, [pc, #140]	@ (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002728:	f7ff ff7d 	bl	8002626 <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	4323      	orrs	r3, r4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d133      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800273c:	f023 030f 	bic.w	r3, r3, #15
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	6811      	ldr	r1, [r2, #0]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	430a      	orrs	r2, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002750:	e024      	b.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800275a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800275e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002762:	f7ff ff60 	bl	8002626 <LL_ADC_IsEnabled>
 8002766:	4604      	mov	r4, r0
 8002768:	4812      	ldr	r0, [pc, #72]	@ (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800276a:	f7ff ff5c 	bl	8002626 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	4323      	orrs	r3, r4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002776:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800277e:	f023 030f 	bic.w	r3, r3, #15
 8002782:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002784:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002786:	e009      	b.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800279a:	e000      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800279c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3784      	adds	r7, #132	@ 0x84
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	50000100 	.word	0x50000100
 80027b8:	50000300 	.word	0x50000300

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	@ (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	@ (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	@ 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	@ 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff8e 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff47 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff5e 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff90 	bl	8002874 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5f 	bl	8002820 <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffb2 	bl	80028dc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002992:	e15a      	b.n	8002c4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2101      	movs	r1, #1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 814c 	beq.w	8002c44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d005      	beq.n	80029c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d130      	bne.n	8002a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fa:	2201      	movs	r2, #1
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 0201 	and.w	r2, r3, #1
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d017      	beq.n	8002a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d123      	bne.n	8002ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	08da      	lsrs	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3208      	adds	r2, #8
 8002ab0:	6939      	ldr	r1, [r7, #16]
 8002ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80a6 	beq.w	8002c44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_GPIO_Init+0x2e4>)
 8002afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002afc:	4a5a      	ldr	r2, [pc, #360]	@ (8002c68 <HAL_GPIO_Init+0x2e4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b04:	4b58      	ldr	r3, [pc, #352]	@ (8002c68 <HAL_GPIO_Init+0x2e4>)
 8002b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b10:	4a56      	ldr	r2, [pc, #344]	@ (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b3a:	d01f      	beq.n	8002b7c <HAL_GPIO_Init+0x1f8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002c70 <HAL_GPIO_Init+0x2ec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d019      	beq.n	8002b78 <HAL_GPIO_Init+0x1f4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a4b      	ldr	r2, [pc, #300]	@ (8002c74 <HAL_GPIO_Init+0x2f0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_GPIO_Init+0x1f0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c78 <HAL_GPIO_Init+0x2f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00d      	beq.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a49      	ldr	r2, [pc, #292]	@ (8002c7c <HAL_GPIO_Init+0x2f8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <HAL_GPIO_Init+0x1e8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a48      	ldr	r2, [pc, #288]	@ (8002c80 <HAL_GPIO_Init+0x2fc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d101      	bne.n	8002b68 <HAL_GPIO_Init+0x1e4>
 8002b64:	2305      	movs	r3, #5
 8002b66:	e00a      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b68:	2306      	movs	r3, #6
 8002b6a:	e008      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	e006      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b70:	2303      	movs	r3, #3
 8002b72:	e004      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_GPIO_Init+0x1fa>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	f002 0203 	and.w	r2, r2, #3
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	4093      	lsls	r3, r2
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b8e:	4937      	ldr	r1, [pc, #220]	@ (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc0:	4a30      	ldr	r2, [pc, #192]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bea:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c14:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c3e:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <HAL_GPIO_Init+0x300>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f ae9d 	bne.w	8002994 <HAL_GPIO_Init+0x10>
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48000800 	.word	0x48000800
 8002c78:	48000c00 	.word	0x48000c00
 8002c7c:	48001000 	.word	0x48001000
 8002c80:	48001400 	.word	0x48001400
 8002c84:	40010400 	.word	0x40010400

08002c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
 8002c94:	4613      	mov	r3, r2
 8002c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d141      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd2:	d131      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd4:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cda:	4a46      	ldr	r2, [pc, #280]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce4:	4b43      	ldr	r3, [pc, #268]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cec:	4a41      	ldr	r2, [pc, #260]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf4:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2232      	movs	r2, #50	@ 0x32
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0a:	e002      	b.n	8002d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d12:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1e:	d102      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f2      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d26:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d32:	d158      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e057      	b.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d38:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d48:	e04d      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d50:	d141      	bne.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d131      	bne.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d60:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d66:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d70:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d78:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2232      	movs	r2, #50	@ 0x32
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	0c9b      	lsrs	r3, r3, #18
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d96:	e002      	b.n	8002d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002daa:	d102      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f2      	bne.n	8002d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dbe:	d112      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e011      	b.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002dd4:	e007      	b.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dd6:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dde:	4a05      	ldr	r2, [pc, #20]	@ (8002df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40007000 	.word	0x40007000
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	431bde83 	.word	0x431bde83

08002e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0e:	6093      	str	r3, [r2, #8]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40007000 	.word	0x40007000

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e2fe      	b.n	8003430 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4b97      	ldr	r3, [pc, #604]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4b94      	ldr	r3, [pc, #592]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d102      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3e>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b8d      	ldr	r3, [pc, #564]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e2d9      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b85      	ldr	r3, [pc, #532]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a84      	ldr	r2, [pc, #528]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7b      	ldr	r2, [pc, #492]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b78      	ldr	r3, [pc, #480]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a77      	ldr	r2, [pc, #476]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b75      	ldr	r3, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a74      	ldr	r2, [pc, #464]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fee2 	bl	8000ca0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fede 	bl	8000ca0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e29e      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fd fece 	bl	8000ca0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fd feca 	bl	8000ca0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e28a      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f1a:	4b60      	ldr	r3, [pc, #384]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b59      	ldr	r3, [pc, #356]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b56      	ldr	r3, [pc, #344]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_OscConfig+0x136>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d002      	beq.n	8002f5c <HAL_RCC_OscConfig+0x13c>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11f      	bne.n	8002f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_OscConfig+0x154>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e25d      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f74:	4b49      	ldr	r3, [pc, #292]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	4946      	ldr	r1, [pc, #280]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f88:	4b45      	ldr	r3, [pc, #276]	@ (80030a0 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fe3b 	bl	8000c08 <HAL_InitTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d043      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e249      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fe76 	bl	8000ca0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fd fe72 	bl	8000ca0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e232      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	4b34      	ldr	r3, [pc, #208]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b31      	ldr	r3, [pc, #196]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	492d      	ldr	r1, [pc, #180]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	e01a      	b.n	8003022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fec:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fd fe52 	bl	8000ca0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fd fe4e 	bl	8000ca0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e20e      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1e0>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d041      	beq.n	80030b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01c      	beq.n	8003070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003036:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800303c:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd fe2b 	bl	8000ca0 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7fd fe27 	bl	8000ca0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1e7      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <HAL_RCC_OscConfig+0x22e>
 800306e:	e020      	b.n	80030b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003076:	4a09      	ldr	r2, [pc, #36]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fd fe0e 	bl	8000ca0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003086:	e00d      	b.n	80030a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fd fe0a 	bl	8000ca0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d906      	bls.n	80030a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e1ca      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	4b8c      	ldr	r3, [pc, #560]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ea      	bne.n	8003088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a6 	beq.w	800320c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030c4:	4b84      	ldr	r3, [pc, #528]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2b4>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b7f      	ldr	r3, [pc, #508]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	4a7e      	ldr	r2, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e6:	4b7c      	ldr	r3, [pc, #496]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f6:	4b79      	ldr	r3, [pc, #484]	@ (80032dc <HAL_RCC_OscConfig+0x4bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003102:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x4bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	@ (80032dc <HAL_RCC_OscConfig+0x4bc>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fd fdc7 	bl	8000ca0 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fd fdc3 	bl	8000ca0 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e183      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x4bc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d108      	bne.n	800314e <HAL_RCC_OscConfig+0x32e>
 800313c:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	4a65      	ldr	r2, [pc, #404]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800314c:	e024      	b.n	8003198 <HAL_RCC_OscConfig+0x378>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d110      	bne.n	8003178 <HAL_RCC_OscConfig+0x358>
 8003156:	4b60      	ldr	r3, [pc, #384]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	4a5e      	ldr	r2, [pc, #376]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003166:	4b5c      	ldr	r3, [pc, #368]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	4a5a      	ldr	r2, [pc, #360]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003176:	e00f      	b.n	8003198 <HAL_RCC_OscConfig+0x378>
 8003178:	4b57      	ldr	r3, [pc, #348]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	4a56      	ldr	r2, [pc, #344]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003188:	4b53      	ldr	r3, [pc, #332]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	4a52      	ldr	r2, [pc, #328]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fd fd7e 	bl	8000ca0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fd fd7a 	bl	8000ca0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e138      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	4b46      	ldr	r3, [pc, #280]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ed      	beq.n	80031a8 <HAL_RCC_OscConfig+0x388>
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fd fd67 	bl	8000ca0 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fd fd63 	bl	8000ca0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e121      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b3a      	ldr	r3, [pc, #232]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ed      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	4a34      	ldr	r2, [pc, #208]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d03c      	beq.n	8003292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01c      	beq.n	800325a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003220:	4b2d      	ldr	r3, [pc, #180]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003226:	4a2c      	ldr	r2, [pc, #176]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd fd36 	bl	8000ca0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003238:	f7fd fd32 	bl	8000ca0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0f2      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ef      	beq.n	8003238 <HAL_RCC_OscConfig+0x418>
 8003258:	e01b      	b.n	8003292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800325a:	4b1f      	ldr	r3, [pc, #124]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800325c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003260:	4a1d      	ldr	r2, [pc, #116]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fd fd19 	bl	8000ca0 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003272:	f7fd fd15 	bl	8000ca0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0d5      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003284:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ef      	bne.n	8003272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80c9 	beq.w	800342e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329c:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	f000 8083 	beq.w	80033b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d15e      	bne.n	8003370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b09      	ldr	r3, [pc, #36]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a08      	ldr	r2, [pc, #32]	@ (80032d8 <HAL_RCC_OscConfig+0x4b8>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd fcef 	bl	8000ca0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e00c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fd fceb 	bl	8000ca0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d905      	bls.n	80032e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0ab      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e0:	4b55      	ldr	r3, [pc, #340]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ec      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b52      	ldr	r3, [pc, #328]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b52      	ldr	r3, [pc, #328]	@ (800343c <HAL_RCC_OscConfig+0x61c>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6a11      	ldr	r1, [r2, #32]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003306:	0212      	lsls	r2, r2, #8
 8003308:	4311      	orrs	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0552      	lsls	r2, r2, #21
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800331a:	0852      	lsrs	r2, r2, #1
 800331c:	3a01      	subs	r2, #1
 800331e:	0652      	lsls	r2, r2, #25
 8003320:	4311      	orrs	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003326:	06d2      	lsls	r2, r2, #27
 8003328:	430a      	orrs	r2, r1
 800332a:	4943      	ldr	r1, [pc, #268]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a40      	ldr	r2, [pc, #256]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b3e      	ldr	r3, [pc, #248]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a3d      	ldr	r2, [pc, #244]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd fcaa 	bl	8000ca0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fd fca6 	bl	8000ca0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e066      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b35      	ldr	r3, [pc, #212]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x530>
 800336e:	e05e      	b.n	800342e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a30      	ldr	r2, [pc, #192]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fd fc90 	bl	8000ca0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd fc8c 	bl	8000ca0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04c      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033a2:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	4924      	ldr	r1, [pc, #144]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_RCC_OscConfig+0x620>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	60cb      	str	r3, [r1, #12]
 80033ae:	e03e      	b.n	800342e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e039      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCC_OscConfig+0x618>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d12c      	bne.n	800342a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	3b01      	subs	r3, #1
 80033dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d123      	bne.n	800342a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d11b      	bne.n	800342a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d113      	bne.n	800342a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d109      	bne.n	800342a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	3b01      	subs	r3, #1
 8003424:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	019f800c 	.word	0x019f800c
 8003440:	feeefffc 	.word	0xfeeefffc

08003444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e11e      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b91      	ldr	r3, [pc, #580]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d910      	bls.n	800348c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b8e      	ldr	r3, [pc, #568]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 020f 	bic.w	r2, r3, #15
 8003472:	498c      	ldr	r1, [pc, #560]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b8a      	ldr	r3, [pc, #552]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e106      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d073      	beq.n	8003580 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d129      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a0:	4b81      	ldr	r3, [pc, #516]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0f4      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034b0:	f000 f966 	bl	8003780 <RCC_GetSysClockFreqFromPLLSource>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4a7c      	ldr	r2, [pc, #496]	@ (80036ac <HAL_RCC_ClockConfig+0x268>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d93f      	bls.n	800353e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034be:	4b7a      	ldr	r3, [pc, #488]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d033      	beq.n	800353e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12f      	bne.n	800353e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034de:	4b72      	ldr	r3, [pc, #456]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034e6:	4a70      	ldr	r2, [pc, #448]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e024      	b.n	800353e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d107      	bne.n	800350c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fc:	4b6a      	ldr	r3, [pc, #424]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0c6      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350c:	4b66      	ldr	r3, [pc, #408]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0be      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800351c:	f000 f8ce 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8003520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4a61      	ldr	r2, [pc, #388]	@ (80036ac <HAL_RCC_ClockConfig+0x268>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d909      	bls.n	800353e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800352a:	4b5f      	ldr	r3, [pc, #380]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003532:	4a5d      	ldr	r2, [pc, #372]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 8003534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003538:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800353e:	4b5a      	ldr	r3, [pc, #360]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4957      	ldr	r1, [pc, #348]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fd fba6 	bl	8000ca0 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fd fba2 	bl	8000ca0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e095      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003598:	4b43      	ldr	r3, [pc, #268]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a42      	ldr	r2, [pc, #264]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800359e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035b0:	4b3d      	ldr	r3, [pc, #244]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035b8:	4a3b      	ldr	r2, [pc, #236]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b39      	ldr	r3, [pc, #228]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4936      	ldr	r1, [pc, #216]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	d105      	bne.n	80035e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035da:	4b33      	ldr	r3, [pc, #204]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4a32      	ldr	r2, [pc, #200]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e6:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d21d      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f023 020f 	bic.w	r2, r3, #15
 80035fc:	4929      	ldr	r1, [pc, #164]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003604:	f7fd fb4c 	bl	8000ca0 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fd fb48 	bl	8000ca0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e03b      	b.n	800369a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	@ (80036a4 <HAL_RCC_ClockConfig+0x260>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d1ed      	bne.n	800360c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800363c:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4917      	ldr	r1, [pc, #92]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800365a:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	490f      	ldr	r1, [pc, #60]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366e:	f000 f825 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8003672:	4602      	mov	r2, r0
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <HAL_RCC_ClockConfig+0x264>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <HAL_RCC_ClockConfig+0x26c>)
 8003680:	5ccb      	ldrb	r3, [r1, r3]
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <HAL_RCC_ClockConfig+0x270>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800368e:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <HAL_RCC_ClockConfig+0x274>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fd fab8 	bl	8000c08 <HAL_InitTick>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	04c4b400 	.word	0x04c4b400
 80036b0:	080044c0 	.word	0x080044c0
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d102      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e047      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036d4:	4b27      	ldr	r3, [pc, #156]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036e0:	4b26      	ldr	r3, [pc, #152]	@ (800377c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e03e      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036e6:	4b23      	ldr	r3, [pc, #140]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d136      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d10c      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003710:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 800371a:	68d2      	ldr	r2, [r2, #12]
 800371c:	0a12      	lsrs	r2, r2, #8
 800371e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
      break;
 8003728:	e00c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800372a:	4a13      	ldr	r2, [pc, #76]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4a10      	ldr	r2, [pc, #64]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003734:	68d2      	ldr	r2, [r2, #12]
 8003736:	0a12      	lsrs	r2, r2, #8
 8003738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800373c:	fb02 f303 	mul.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
      break;
 8003742:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0e5b      	lsrs	r3, r3, #25
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e001      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003764:	693b      	ldr	r3, [r7, #16]
}
 8003766:	4618      	mov	r0, r3
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003786:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003790:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	3301      	adds	r3, #1
 800379c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d10c      	bne.n	80037be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a4:	4a17      	ldr	r2, [pc, #92]	@ (8003804 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ae:	68d2      	ldr	r2, [r2, #12]
 80037b0:	0a12      	lsrs	r2, r2, #8
 80037b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	617b      	str	r3, [r7, #20]
    break;
 80037bc:	e00c      	b.n	80037d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037be:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	0a12      	lsrs	r2, r2, #8
 80037cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    break;
 80037d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0e5b      	lsrs	r3, r3, #25
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80037f2:	687b      	ldr	r3, [r7, #4]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40021000 	.word	0x40021000
 8003804:	007a1200 	.word	0x007a1200
 8003808:	00f42400 	.word	0x00f42400

0800380c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003814:	2300      	movs	r3, #0
 8003816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003818:	2300      	movs	r3, #0
 800381a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8098 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	4a3f      	ldr	r2, [pc, #252]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a39      	ldr	r2, [pc, #228]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003862:	f7fd fa1d 	bl	8000ca0 <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003868:	e009      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386a:	f7fd fa19 	bl	8000ca0 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d902      	bls.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	74fb      	strb	r3, [r7, #19]
        break;
 800387c:	e005      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800387e:	4b30      	ldr	r3, [pc, #192]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ef      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d159      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003890:	4b2a      	ldr	r3, [pc, #168]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800389a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d019      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ac:	4b23      	ldr	r3, [pc, #140]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b8:	4b20      	ldr	r3, [pc, #128]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c8:	4b1c      	ldr	r3, [pc, #112]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038d8:	4a18      	ldr	r2, [pc, #96]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd f9d9 	bl	8000ca0 <HAL_GetTick>
 80038ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f0:	e00b      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fd f9d5 	bl	8000ca0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d902      	bls.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	74fb      	strb	r3, [r7, #19]
            break;
 8003908:	e006      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390a:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ec      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391e:	4b07      	ldr	r3, [pc, #28]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	4903      	ldr	r1, [pc, #12]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003934:	e008      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	74bb      	strb	r3, [r7, #18]
 800393a:	e005      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003948:	7c7b      	ldrb	r3, [r7, #17]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d105      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4ba6      	ldr	r3, [pc, #664]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	4aa5      	ldr	r2, [pc, #660]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003958:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003966:	4ba0      	ldr	r3, [pc, #640]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396c:	f023 0203 	bic.w	r2, r3, #3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	499c      	ldr	r1, [pc, #624]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003988:	4b97      	ldr	r3, [pc, #604]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 020c 	bic.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4994      	ldr	r1, [pc, #592]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039aa:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	498b      	ldr	r1, [pc, #556]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039cc:	4b86      	ldr	r3, [pc, #536]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	4983      	ldr	r1, [pc, #524]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ee:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	497a      	ldr	r1, [pc, #488]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a10:	4b75      	ldr	r3, [pc, #468]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	4972      	ldr	r1, [pc, #456]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a32:	4b6d      	ldr	r3, [pc, #436]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4969      	ldr	r1, [pc, #420]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a54:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4961      	ldr	r1, [pc, #388]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a76:	4b5c      	ldr	r3, [pc, #368]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	4958      	ldr	r1, [pc, #352]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a98:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	4950      	ldr	r1, [pc, #320]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a4a      	ldr	r2, [pc, #296]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ad0:	4b45      	ldr	r3, [pc, #276]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	4942      	ldr	r1, [pc, #264]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a3c      	ldr	r2, [pc, #240]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b08:	4b37      	ldr	r3, [pc, #220]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	4934      	ldr	r1, [pc, #208]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	4926      	ldr	r1, [pc, #152]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b21      	ldr	r3, [pc, #132]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a20      	ldr	r2, [pc, #128]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b86:	4918      	ldr	r1, [pc, #96]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a12      	ldr	r2, [pc, #72]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbe:	490a      	ldr	r1, [pc, #40]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e09d      	b.n	8003d3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0e:	d009      	beq.n	8003c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]
 8003c16:	e005      	b.n	8003c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fc ff1c 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c64:	d902      	bls.n	8003c6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e002      	b.n	8003c72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c7a:	d007      	beq.n	8003c8c <HAL_SPI_Init+0xa0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	ea42 0103 	orr.w	r1, r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	f003 0204 	and.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d08:	ea42 0103 	orr.w	r1, r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x26>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e20a      	b.n	800417e <HAL_SPI_TransmitReceive+0x43c>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d70:	f7fc ff96 	bl	8000ca0 <HAL_GetTick>
 8003d74:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d7c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d8c:	7efb      	ldrb	r3, [r7, #27]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d00e      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x6e>
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d98:	d106      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x66>
 8003da2:	7efb      	ldrb	r3, [r7, #27]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d003      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003dae:	e1e0      	b.n	8004172 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x80>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x80>
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003dc8:	e1d3      	b.n	8004172 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2205      	movs	r2, #5
 8003dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	887a      	ldrh	r2, [r7, #2]
 8003df6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	887a      	ldrh	r2, [r7, #2]
 8003e0a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e20:	d802      	bhi.n	8003e28 <HAL_SPI_TransmitReceive+0xe6>
 8003e22:	8a3b      	ldrh	r3, [r7, #16]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d908      	bls.n	8003e3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e36:	605a      	str	r2, [r3, #4]
 8003e38:	e007      	b.n	8003e4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d007      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e70:	f240 8081 	bls.w	8003f76 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x140>
 8003e7c:	8a7b      	ldrh	r3, [r7, #18]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d16d      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e86:	881a      	ldrh	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea6:	e05a      	b.n	8003f5e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d11b      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x1ac>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x1ac>
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d113      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d11c      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x1f4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	b292      	uxth	r2, r2
 8003f14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f32:	2301      	movs	r3, #1
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f36:	f7fc feb3 	bl	8000ca0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d80b      	bhi.n	8003f5e <HAL_SPI_TransmitReceive+0x21c>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d007      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003f5c:	e109      	b.n	8004172 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d19f      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x166>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d199      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x166>
 8003f74:	e0e3      	b.n	800413e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_SPI_TransmitReceive+0x244>
 8003f7e:	8a7b      	ldrh	r3, [r7, #18]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f040 80cf 	bne.w	8004124 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d912      	bls.n	8003fb6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b02      	subs	r3, #2
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003fb4:	e0b6      	b.n	8004124 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fdc:	e0a2      	b.n	8004124 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d134      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x314>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02f      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x314>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d12c      	bne.n	8004056 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d912      	bls.n	800402c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	1c9a      	adds	r2, r3, #2
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b02      	subs	r3, #2
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800402a:	e012      	b.n	8004052 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d148      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x3b4>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d042      	beq.n	80040f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d923      	bls.n	80040c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	b292      	uxth	r2, r2
 8004088:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	1c9a      	adds	r2, r3, #2
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b02      	subs	r3, #2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d81f      	bhi.n	80040f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	e016      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f103 020c 	add.w	r2, r3, #12
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f2:	2301      	movs	r3, #1
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040f6:	f7fc fdd3 	bl	8000ca0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004102:	429a      	cmp	r2, r3
 8004104:	d803      	bhi.n	800410e <HAL_SPI_TransmitReceive+0x3cc>
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d102      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x3d2>
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004122:	e026      	b.n	8004172 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	f47f af57 	bne.w	8003fde <HAL_SPI_TransmitReceive+0x29c>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af50 	bne.w	8003fde <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f93e 	bl	80043c4 <SPI_EndRxTxTransaction>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004168:	e003      	b.n	8004172 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800417a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800417e:	4618      	mov	r0, r3
 8004180:	3728      	adds	r7, #40	@ 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004198:	f7fc fd82 	bl	8000ca0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041a8:	f7fc fd7a 	bl	8000ca0 <HAL_GetTick>
 80041ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ae:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	015b      	lsls	r3, r3, #5
 80041b4:	0d1b      	lsrs	r3, r3, #20
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	e054      	b.n	800426a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d050      	beq.n	800426a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041c8:	f7fc fd6a 	bl	8000ca0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d902      	bls.n	80041de <SPI_WaitFlagStateUntilTimeout+0x56>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d13d      	bne.n	800425a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041f6:	d111      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x94>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004200:	d004      	beq.n	800420c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420a:	d107      	bne.n	800421c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800421a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004224:	d10f      	bne.n	8004246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e017      	b.n	800428a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3b01      	subs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d19b      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000000 	.word	0x20000000

08004298 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	@ 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042aa:	f7fc fcf9 	bl	8000ca0 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042ba:	f7fc fcf1 	bl	8000ca0 <HAL_GetTick>
 80042be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042c8:	4b3d      	ldr	r3, [pc, #244]	@ (80043c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00da      	lsls	r2, r3, #3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	0d1b      	lsrs	r3, r3, #20
 80042d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042e0:	e060      	b.n	80043a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80042e8:	d107      	bne.n	80042fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d104      	bne.n	80042fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d050      	beq.n	80043a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004302:	f7fc fccd 	bl	8000ca0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430e:	429a      	cmp	r2, r3
 8004310:	d902      	bls.n	8004318 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d13d      	bne.n	8004394 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004330:	d111      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433a:	d004      	beq.n	8004346 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004344:	d107      	bne.n	8004356 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435e:	d10f      	bne.n	8004380 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800437e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e010      	b.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d196      	bne.n	80042e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3728      	adds	r7, #40	@ 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000000 	.word	0x20000000

080043c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff ff5b 	bl	8004298 <SPI_WaitFifoStateUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e027      	b.n	8004448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	@ 0x80
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff fec0 	bl	8004188 <SPI_WaitFlagStateUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e014      	b.n	8004448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff ff34 	bl	8004298 <SPI_WaitFifoStateUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e000      	b.n	8004448 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <memset>:
 8004450:	4402      	add	r2, r0
 8004452:	4603      	mov	r3, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	d100      	bne.n	800445a <memset+0xa>
 8004458:	4770      	bx	lr
 800445a:	f803 1b01 	strb.w	r1, [r3], #1
 800445e:	e7f9      	b.n	8004454 <memset+0x4>

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4d0d      	ldr	r5, [pc, #52]	@ (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	@ (800449c <__libc_init_array+0x3c>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2600      	movs	r6, #0
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4d0b      	ldr	r5, [pc, #44]	@ (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	@ (80044a4 <__libc_init_array+0x44>)
 8004474:	f000 f818 	bl	80044a8 <_init>
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2600      	movs	r6, #0
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	080044d0 	.word	0x080044d0
 800449c:	080044d0 	.word	0x080044d0
 80044a0:	080044d0 	.word	0x080044d0
 80044a4:	080044d4 	.word	0x080044d4

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr
